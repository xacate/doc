(self["webpackChunkwallet_vue"]=self["webpackChunkwallet_vue"]||[]).push([[6296],{19442:function(e){"use strict";e.exports=JSON.parse('{"address":"75yCS5ejon7bmjgqFhuJZmH2ExmM1E3sesc8YDD1gdwp","metadata":{"name":"pool","version":"0.1.0","spec":"0.1.0","description":"MARB池子合约"},"instructions":[{"name":"claim_rewards","discriminator":[4,144,132,71,116,23,151,80],"accounts":[{"name":"pool","writable":true},{"name":"reward_vault","writable":true},{"name":"user_marb_account","writable":true},{"name":"marb_mint"},{"name":"claimer","signer":true},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"}],"args":[{"name":"amount","type":"u64"}]},{"name":"emergency_usdc_withdraw","discriminator":[60,115,253,107,122,247,175,128],"accounts":[{"name":"pool","writable":true},{"name":"authority","signer":true,"relations":["pool"]},{"name":"usdc_vault","writable":true},{"name":"admin_usdc_account","writable":true},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"}],"args":[]},{"name":"get_pool_amounts","discriminator":[39,222,49,21,251,12,2,254],"accounts":[{"name":"pool"}],"args":[]},{"name":"initialize","discriminator":[175,175,109,31,13,152,155,237],"accounts":[{"name":"pool","writable":true,"pda":{"seeds":[{"kind":"const","value":[112,111,111,108]}]}},{"name":"pool_pda_authority","pda":{"seeds":[{"kind":"const","value":[112,111,111,108]}]}},{"name":"marb_mint"},{"name":"usdc_mint"},{"name":"marb_vault","writable":true,"pda":{"seeds":[{"kind":"const","value":[109,97,114,98,95,118,97,117,108,116]}]}},{"name":"usdc_vault","writable":true,"pda":{"seeds":[{"kind":"const","value":[117,115,100,99,95,118,97,117,108,116]}]}},{"name":"user_marb_account","writable":true},{"name":"user_usdc_account","writable":true},{"name":"authority","writable":true,"signer":true},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"system_program","address":"11111111111111111111111111111111"},{"name":"rent","address":"SysvarRent111111111111111111111111111111111"}],"args":[{"name":"marb_amount","type":"u64"},{"name":"usdc_amount","type":"u64"},{"name":"initial_fomo_program_id","type":"pubkey"}]},{"name":"inject_marb","discriminator":[106,179,33,8,168,127,183,25],"accounts":[{"name":"pool","writable":true},{"name":"marb_vault","writable":true,"relations":["pool"]},{"name":"usdc_vault","writable":true,"relations":["pool"]},{"name":"user_marb_account","writable":true},{"name":"user_usdc_account","writable":true},{"name":"operation_usdc_account","writable":true},{"name":"marb_mint"},{"name":"usdc_mint_account"},{"name":"fomo_pool","docs":["FOMO 奖池账户 (PDA: seeds=[b\\"fomo_pool\\"], program=FOMO_PROGRAM_ID)"],"writable":true},{"name":"fomo_participant","docs":["FOMO 参与者记录账户 (PDA: seeds=[b\\"participant\\", user_wallet, round], program=FOMO_PROGRAM_ID)"],"writable":true},{"name":"fomo_usdc_vault","docs":["FOMO 合约的 USDC 金库 (PDA: seeds=[b\\"usdc_vault\\"], program=FOMO_PROGRAM_ID)"],"writable":true},{"name":"system_program","docs":["系统程序（用于 FOMO CPI 调用）"],"address":"11111111111111111111111111111111"},{"name":"authority","signer":true},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"}],"args":[{"name":"amount","type":"u64"},{"name":"min_usdc_to_receive","type":"u64"}]},{"name":"inject_usdc","discriminator":[100,231,171,28,112,91,123,149],"accounts":[{"name":"pool","docs":["资金池主账户（固定PDA）","- mut: 需要修改池子状态（更新USDC余额等）","- seeds = [b\\"pool\\"]: 使用固定种子，系统唯一的资金池","- bump: 自动处理PDA的bump值"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[112,111,111,108]}]}},{"name":"usdc_vault","docs":["资金池的USDC存储库（自动推导）","- mut: 需要接收用户注入的USDC","- seeds = [b\\"usdc_vault\\"]: 固定种子推导金库地址","- bump: 自动处理PDA的bump值"],"writable":true,"pda":{"seeds":[{"kind":"const","value":[117,115,100,99,95,118,97,117,108,116]}]}},{"name":"user_usdc_account","docs":["用户的USDC代币账户（自动推导）","- mut: 需要从中扣除USDC代币","- associated_token::mint = usdc_mint: 绑定到USDC代币","- associated_token::authority = authority: 用户拥有此账户"],"writable":true,"pda":{"seeds":[{"kind":"account","path":"authority"},{"kind":"const","value":[6,221,246,225,215,101,161,147,217,203,225,70,206,235,121,172,28,180,133,237,95,91,55,145,58,140,245,133,126,255,0,169]},{"kind":"account","path":"usdc_mint"}],"program":{"kind":"const","value":[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{"name":"operation_usdc_account","docs":["运营团队的USDC接收账户（从池子配置中获取固定地址）","- address = pool.operation_usdc_account: 使用池子中存储的固定账户地址","- mut: 需要接收USDC代币"],"writable":true},{"name":"fomo_pool","docs":["FOMO 奖池账户 (PDA: seeds=[b\\"fomo_pool\\"], program=FOMO_PROGRAM_ID)"],"writable":true},{"name":"fomo_participant","docs":["FOMO 参与者记录账户 (PDA: seeds=[b\\"participant\\", user_wallet, round], program=FOMO_PROGRAM_ID)"],"writable":true},{"name":"fomo_usdc_vault","docs":["FOMO 合约的 USDC 金库 (PDA: seeds=[b\\"usdc_vault\\"], program=FOMO_PROGRAM_ID)"],"writable":true},{"name":"authority","docs":["交易发起者（唯一需要用户提供的账户）","- 必须是交易的签名者","- 拥有user_usdc_account的使用权限","- 支付所有可能的账户创建费用"],"writable":true,"signer":true},{"name":"token_program","docs":["SPL Token程序（系统常量）"],"address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"associated_token_program","docs":["关联代币程序（系统常量）"],"address":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"},{"name":"system_program","docs":["系统程序（系统常量）"],"address":"11111111111111111111111111111111"},{"name":"usdc_mint","docs":["USDC铸币账户（系统常量）","- address: 预定义的USDC地址，无需用户传入"]}],"args":[{"name":"amount","type":"u64"}]},{"name":"transfer_periodic_rewards","discriminator":[155,137,23,13,33,203,175,44],"accounts":[{"name":"pool","writable":true},{"name":"marb_vault","writable":true},{"name":"reward_vault","writable":true},{"name":"authority","signer":true},{"name":"marb_mint"},{"name":"token_program","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"clock","address":"SysvarC1ock11111111111111111111111111111111"}],"args":[]},{"name":"update_allocation_percentages","discriminator":[139,212,233,102,68,35,105,240],"accounts":[{"name":"pool","writable":true},{"name":"authority","signer":true,"relations":["pool"]}],"args":[{"name":"fomo_percent","type":"u8"},{"name":"operation_percent","type":"u8"},{"name":"pool_percent","type":"u8"}]},{"name":"update_fomo_program_id","discriminator":[91,142,197,98,24,76,241,92],"accounts":[{"name":"pool","writable":true},{"name":"authority","signer":true,"relations":["pool"]}],"args":[{"name":"new_fomo_program_id","type":"pubkey"}]},{"name":"update_min_usdc_injection_amount","discriminator":[245,33,137,86,23,208,103,251],"accounts":[{"name":"pool","writable":true},{"name":"authority","signer":true,"relations":["pool"]}],"args":[{"name":"new_min_amount","type":"u64"}]},{"name":"update_operation_usdc_account","discriminator":[32,9,69,224,128,238,29,69],"accounts":[{"name":"pool","writable":true},{"name":"authority","signer":true,"relations":["pool"]}],"args":[{"name":"new_operation_usdc_account","type":"pubkey"}]},{"name":"update_reward_claim_account","discriminator":[98,165,203,171,90,184,58,161],"accounts":[{"name":"pool","writable":true},{"name":"authority","signer":true,"relations":["pool"]}],"args":[{"name":"new_reward_claim_account","type":"pubkey"}]}],"accounts":[{"name":"Pool","discriminator":[241,154,109,4,17,177,109,188]}],"errors":[{"code":6000,"name":"InvalidInitialAmount","msg":"无效的初始金额"},{"code":6001,"name":"InsufficientFunds","msg":"资金不足"},{"code":6002,"name":"Unauthorized","msg":"未授权操作"},{"code":6003,"name":"InvalidAllocationPercentages","msg":"无效的分配比例，总和必须为100%"},{"code":6004,"name":"InvalidMint","msg":"无效的Mint地址"},{"code":6005,"name":"InvalidWallet","msg":"无效的钱包地址"},{"code":6006,"name":"InvalidAccount","msg":"无效的账户"},{"code":6007,"name":"InvalidProgram","msg":"无效的程序ID"},{"code":6008,"name":"SlippageExceeded","msg":"滑点超限，收到的代币数量低于预期最小值"},{"code":6009,"name":"InsufficientUsdcInjectionAmount","msg":"注入的USDC金额低于设定的最低值"},{"code":6010,"name":"InvalidAllocationInternal","msg":"内部资金分配错误"},{"code":6011,"name":"InsufficientTimeElapsed","msg":"转账时间间隔不足"},{"code":6012,"name":"InvalidRewardAccount","msg":"无效的奖励账户"}],"types":[{"name":"Pool","type":{"kind":"struct","fields":[{"name":"marb_vault","type":"pubkey"},{"name":"usdc_vault","type":"pubkey"},{"name":"authority","type":"pubkey"},{"name":"fomo_program_id","type":"pubkey"},{"name":"operation_usdc_account","type":"pubkey"},{"name":"bump","type":"u8"},{"name":"marb_amount","type":"u64"},{"name":"usdc_amount","type":"u64"},{"name":"fomo_percent","type":"u8"},{"name":"operation_percent","type":"u8"},{"name":"pool_percent","type":"u8"},{"name":"min_usdc_injection_amount","type":"u64"},{"name":"last_transfer_timestamp","type":"i64"},{"name":"reward_claim_account","type":"pubkey"}]}}]}')},47790:function(){},63212:function(e,n,t){var r={"./MarbPool.json":19442,"./fomo.json":87941};function a(e){var n=o(e);return t(n)}function o(e){if(!t.o(r,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=o,e.exports=a,a.id=63212},85133:function(e,n,t){"use strict";t.r(n),t.d(n,{SolanaWallet:function(){return ce}});var r={};t.r(r),t.d(r,{FomoProgramId:function(){return M},checkDrawCondition:function(){return F},getFomoBasePoolInfo:function(){return N}});var a={};t.r(a),t.d(a,{buyLp:function(){return Z},claimRewards:function(){return R},getPoolAmounts:function(){return X},getTokenBalance:function(){return L},updateOperationWallet:function(){return G}});var o={};t.r(o),t.d(o,{emergency_usdc_withdraw:function(){return oe},getOrCreateAssociatedTokenAccount:function(){return se},transferSPLToken:function(){return ie},transfer_periodic_rewards:function(){return ae},updateAllocationPercentages:function(){return $},updateMinUsdcInjectionAmount:function(){return ee},update_fomo_program_id:function(){return ne},update_operation_wallet:function(){return te},update_reward_claim_account:function(){return re}});var s=t(90712),i=(t(48016),t(75747)),c=t(53598),u=t(60292),m=t(96030);const l="6994930af7a33d0ea1f9ee48aa9cf916",d={name:"project",description:"AppKit Example",url:"https://reown.com/appkit",icons:["https://assets.reown.com/reown-profile-pic.png"]},p=(u.tWt,u.gTy,u.Rn0,new c.S),f=(0,i.sX)({adapters:[p],metadata:d,enableWalletConnect:!1,debug:!0,networks:[u.Rn0],projectId:l,features:{connectMethodsOrder:["wallet"]}});new m.PublicKey("BNCZGayZYW4QtfG13FwPGSHpeRpH4ixmT7j6vNvUBsV4");const y=new m.PublicKey("Cx5C5ShaPZoj2DMF4skwPyXGz2sYi3D79YfnDLy2N7pf");t(18111),t(20116);var g=t(68708),b=t(41407),w=t(85731),_=t(33580),P=t(66360);t(22489),t(7588);const k={},v=t(63212);function A(e){let n=0;const t=new DataView(e.buffer,n),r=t.getBigUint64(n,!0),a=t.getBigUint64(n+=8,!0);n+=8;const o=new m.PublicKey(e.subarray(n,n+=32)),s=new m.PublicKey(e.subarray(n,n+=32));return{marbAmount:r,usdcAmount:a,marbMint:o,usdcMint:s}}function S(e,n,t){const r=k[e].types.find((e=>e.name===n)),a=r?.type.fields;if(0==a?.length)return{};const o={};let s=8;const i=new DataView(t.buffer);console.log(i.byteLength);for(const c of a)switch(console.log("field.name==>",c.name,s),c.type){case"pubkey":o[c.name]=new m.PublicKey(t.subarray(s,s+32)),s+=32;break;case"u64":o[c.name]=i.getBigUint64(s,!0),s+=8;break;case"u8":o[c.name]=Number(i.getUint8(s)),s+=1;break;case"i64":o[c.name]=i.getBigInt64(s,!0),s+=8;break}return o}function h(e){if(e.value.err){const n=e.value.logs||[],t=n.filter((e=>e.includes("Program log: AnchorError")||e.includes("Program log: Error:")));if(t.length>0){let e=t[0].split(". ");const n={message:"",code:"-1"};for(const t of e)t.includes("Program log: AnchorError ")&&(n.message+=t.replace("Program log: AnchorError ","")),t.includes("Program log: Error:")&&(n.message+=t.replace("Program log: Error:","")),t.includes("Error Code:")&&(n.message+=t.replace("Error Code:"," ")),t.includes("Error Number:")&&(n.code=t.replace("Error Number:",""));return{error:n,data:null}}}const n=e.value.returnData?.data[0]??"";return{error:null,data:Buffer.from(n,"base64")}}v.keys().forEach((e=>{const n=e.replace("./","").replace(".json","");k[n]=v(e)}));t(29087);const B=t(19442),W=t(87941),K=async e=>T("fomo","fomoPool",e),I=async e=>T("MarbPool","Pool",e);async function T(e,n,t){const r=new m.Connection((0,m.clusterApiUrl)("devnet")),a=await r.getAccountInfo(t);return S(e,n,a.data)}const C=async e=>{const n=B.instructions.find((n=>n.name===e));return n?Promise.resolve(Buffer.from(n.discriminator)):Promise.reject({code:-2,message:`${e} instruction is no exist`})},D=async e=>{const n=W.instructions.find((n=>n.name===e));return n?Promise.resolve(Buffer.from(n.discriminator)):Promise.reject({code:-2,message:`${e} instruction is no exist`})},O=async()=>{const{walletProvider:e}=(0,b.AX)("solana");return void 0===e?Promise.reject({code:-1,message:"walletProvider is undefined"}):Promise.resolve(e.publicKey)},j=async(e,n)=>{const{connection:t}=(0,g.ZY)();if(!t)return Promise.reject({code:-1});const{walletProvider:r}=(0,b.AX)("solana");if(void 0===r)return console.log("WalletProvider is undefined"),Promise.reject({code:-1,message:"walletProvider is undefined"});try{const a=new m.TransactionMessage({payerKey:n,recentBlockhash:(await t.getLatestBlockhash()).blockhash,instructions:[e]}).compileToLegacyMessage(),o=new m.VersionedTransaction(a),s=await t.simulateTransaction(o);console.log(s);const i=h(s);if(i.error)return Promise.reject(i.error);const c=await r.signAndSendTransaction(o,{skipPreflight:!0,commitment:"confirmed"});return Promise.resolve(c)}catch(a){return Promise.reject({code:-1,message:a.toString()})}},M=new m.PublicKey("NpdKNnchyHTtdrCZCyp1aSrowEnBRERty26Px8cL8yP");async function N(e){const n=new m.Connection((0,m.clusterApiUrl)("devnet")),[t,r]=m.PublicKey.findProgramAddressSync([Buffer.from("fomo_pool")],M);console.log(t);const a=await D("getPoolInfo"),o=new m.TransactionInstruction({programId:M,keys:[{pubkey:t,isWritable:!0,isSigner:!1}],data:Buffer.concat([a])}),s=await K(t);console.log(s);const i=new m.TransactionMessage({payerKey:new m.PublicKey(e),recentBlockhash:(await n.getLatestBlockhash()).blockhash,instructions:[o]}).compileToLegacyMessage(),c=new m.VersionedTransaction(i),u=await n.simulateTransaction(c);console.log(u);const{error:l,data:d}=h(u);if(l)return Promise.reject({code:-1,message:l});console.log(d)}async function F(e){const n=new m.Connection((0,m.clusterApiUrl)("devnet")),[t,r]=m.PublicKey.findProgramAddressSync([Buffer.from("fomo_pool")],M);console.log(t);const a=await D("checkDrawCondition"),o=new m.TransactionInstruction({programId:M,keys:[{pubkey:t,isWritable:!0,isSigner:!1}],data:Buffer.concat([a])}),s=new m.TransactionMessage({payerKey:new m.PublicKey(e),recentBlockhash:(await n.getLatestBlockhash()).blockhash,instructions:[o]}).compileToLegacyMessage(),i=new m.VersionedTransaction(s),c=await n.simulateTransaction(i);console.log(c);const{error:u,data:l}=h(c);if(u)return Promise.reject({code:-1,message:u});console.log(l)}const U=t(19442),E=t(72487),x=new m.PublicKey("75yCS5ejon7bmjgqFhuJZmH2ExmM1E3sesc8YDD1gdwp");async function R(e,n){const t=await O(),[r,a]=m.PublicKey.findProgramAddressSync([s.Buffer.from("pool")],x),o=await I(r),i=new m.PublicKey(e.marbMint),c=(0,w.Xt)(i,o.reward_claim_account),u=(0,w.Xt)(i,o.reward_claim_account),l=U.instructions.find((e=>"claim_rewards"===e.name));if(!l)return Promise.reject({code:-2,message:"claim_rewards instruction is no exist"});const d=s.Buffer.from(l.discriminator),p=new m.TransactionInstruction({programId:x,keys:[{pubkey:r,isSigner:!1,isWritable:!0},{pubkey:c,isSigner:!1,isWritable:!0},{pubkey:u,isSigner:!1,isWritable:!0},{pubkey:i,isSigner:!1,isWritable:!0},{pubkey:t,isSigner:!0,isWritable:!0},{pubkey:new m.PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"),isSigner:!1,isWritable:!1}],data:s.Buffer.concat([d,new E(1e6*n).toArrayLike(s.Buffer,"le",8)])});return j(p,t)}async function X(e){const n=new m.Connection((0,m.clusterApiUrl)("devnet")),[t,r]=m.PublicKey.findProgramAddressSync([s.Buffer.from("pool")],x),a=U.instructions.find((e=>"get_pool_amounts"===e.name));if(!a)return Promise.reject({code:-2,message:"claim_rewards instruction is no exist"});const o=s.Buffer.from(a.discriminator),i=new m.TransactionInstruction({programId:x,keys:[{pubkey:t,isWritable:!1,isSigner:!1}],data:s.Buffer.concat([o])}),c=new m.TransactionMessage({payerKey:new m.PublicKey(e),recentBlockhash:(await n.getLatestBlockhash()).blockhash,instructions:[i]}).compileToLegacyMessage(),u=new m.VersionedTransaction(c),l=await n.simulateTransaction(u),{error:d,data:p}=h(l);return d?Promise.reject({code:-1,message:d}):A(p)}async function Z(e){const{connection:n}=(0,g.ZY)(),t=await O(),[r]=m.PublicKey.findProgramAddressSync([s.Buffer.from("pool")],x);console.log("pool==>",r.toBase58());const a=await I(r);console.log(a);const[o]=m.PublicKey.findProgramAddressSync([s.Buffer.from("usdc_vault")],x);console.log("usdc_vault==>",r.toBase58());const i=(0,w.Xt)(y,t);console.log("user_usdc_account==>",i.toBase58());const c=a.operation_usdc_account;console.log("operation_wallet===>",c.toBase58());const u=c;console.log("operation_usdc_account==>",u.toBase58());const l=a.fomo_program_id;console.log("fomo_program_wallet==>",l.toBase58());const[d,p]=m.PublicKey.findProgramAddressSync([s.Buffer.from("fomo_pool")],M);console.log("fomo_pool==>",d.toBase58());const f=await K(d);console.log(f);const b=(0,w.Xt)(y,a.fomo_program_id);console.log("fomo_usdc_account==>",b.toBase58());const[P,k]=m.PublicKey.findProgramAddressSync([s.Buffer.from("participant"),t.toBuffer(),s.Buffer.of(Number(f.round))],M);console.log("fomo_participant=>",P.toBase58());const[v,A]=m.PublicKey.findProgramAddressSync([s.Buffer.from("usdc_vault")],M);console.log("fomo_usdc_vault==>",v.toBase58());const S=await C("inject_usdc"),h=s.Buffer.from(S);console.log(_.x5,m.SystemProgram.programId);const B=await(0,w.b6)(n,y);console.log(B,Math.pow(10,B.decimals));const W=new m.TransactionInstruction({programId:x,keys:[{pubkey:r,isSigner:!1,isWritable:!0},{pubkey:o,isSigner:!1,isWritable:!0},{pubkey:i,isSigner:!1,isWritable:!0},{pubkey:u,isSigner:!1,isWritable:!0},{pubkey:d,isSigner:!1,isWritable:!0},{pubkey:P,isSigner:!1,isWritable:!0},{pubkey:v,isSigner:!1,isWritable:!0},{pubkey:t,isWritable:!0,isSigner:!0},{pubkey:_.x5,isSigner:!1,isWritable:!1},{pubkey:_.EK,isSigner:!1,isWritable:!1},{pubkey:m.SystemProgram.programId,isSigner:!1,isWritable:!1},{pubkey:y,isSigner:!1,isWritable:!1}],data:s.Buffer.concat([h,new E(e*Math.pow(10,B.decimals)).toArrayLike(s.Buffer,"le",8)])});return console.log(W),j(W,t)}async function L(e,n){let{connection:t}=(0,g.ZY)();t||(t=new m.Connection((0,m.clusterApiUrl)("devnet")));const{walletProvider:r}=(0,b.AX)("solana");if(void 0===r)return console.log("WalletProvider is undefined"),Promise.reject({code:-1});const a=new m.PublicKey(e),o=new m.PublicKey(n),s=await(0,w.Xt)(a,o);try{const e=await(0,w.b6)(t,a),n=await(0,P.sU)(t,s);return Promise.resolve(Number(n.amount)/Math.pow(10,e.decimals))}catch(i){return i.name?.includes("TokenAccountNotFoundError")?Promise.resolve(0):0}}async function G(e){const[n,t]=m.PublicKey.findProgramAddressSync([s.Buffer.from("pool")],x),{walletProvider:r}=(0,b.AX)("solana");if(void 0===r)return console.log("WalletProvider is undefined"),Promise.reject({code:-1});const a=r.publicKey;console.log("OwnerPublicKey",a),console.log(n.toBase58());const o=await C("updateOperationWallet"),i=s.Buffer.from(o),c=new m.TransactionInstruction({programId:x,keys:[{pubkey:n,isSigner:!1,isWritable:!0},{pubkey:a,isSigner:!0,isWritable:!0}],data:s.Buffer.concat([i,new m.PublicKey(e).toBuffer()])});return j(c,a)}var V=t(8596),Q=t(75226);const Y={async getOrCreateAssociatedTokenAccount(e,n,t=!1,r,a=_.x5,o=_.EK){const s=await(0,w.Ob)(e,n,t,a,o).catch((e=>(console.error("Error getting associated token address:",e),Promise.reject({code:-1,message:"Failed to get associated token address"}))));console.log(s.toBase58());const{connection:i}=(0,g.ZY)();if(!i)return Promise.reject({code:-1,message:"Connection is undefined"});const c=await O();let u;try{u=await(0,P.sU)(i,s,r,a)}catch(l){if(console.log(l),!(l instanceof Q.kD||l instanceof Q.bY))throw l;{const t=[{pubkey:c,isSigner:!0,isWritable:!0},{pubkey:s,isSigner:!1,isWritable:!0},{pubkey:n,isSigner:!1,isWritable:!1},{pubkey:e,isSigner:!1,isWritable:!1},{pubkey:m.SystemProgram.programId,isSigner:!1,isWritable:!1},{pubkey:a,isSigner:!1,isWritable:!1}];try{const e=new m.TransactionInstruction({keys:t,programId:o,data:Buffer.alloc(0)});await j(e,c)}catch(l){}u=await(0,P.sU)(i,s,r,a)}}if(!u.mint.equals(e))throw new Q.P$;if(!u.owner.equals(n))throw new Q.Iy;return u}},J=t(72487),z=new m.PublicKey("75yCS5ejon7bmjgqFhuJZmH2ExmM1E3sesc8YDD1gdwp"),H=new m.PublicKey("BNCZGayZYW4QtfG13FwPGSHpeRpH4ixmT7j6vNvUBsV4"),q=new m.PublicKey("Cx5C5ShaPZoj2DMF4skwPyXGz2sYi3D79YfnDLy2N7pf");async function $(e,n,t){const{walletProvider:r}=(0,b.AX)("solana");if(void 0===r)return Promise.reject({code:-1,message:"walletProvider is undefined"});const a=r.publicKey;console.log("OwnerPublicKey",a);const[o,s]=m.PublicKey.findProgramAddressSync([Buffer.from("pool")],z),i=await C("update_allocation_percentages"),c=new m.TransactionInstruction({programId:z,keys:[{pubkey:o,isSigner:!1,isWritable:!0},{pubkey:a,isSigner:!0,isWritable:!0}],data:Buffer.concat([i,new J(e).toArrayLike(Buffer,"le",8),new J(n).toArrayLike(Buffer,"le",8),new J(t).toArrayLike(Buffer,"le",8)])});return j(c,a)}async function ee(e){const{walletProvider:n}=(0,b.AX)("solana");if(void 0===n)return Promise.reject({code:-1,message:"walletProvider is undefined"});const t=n.publicKey;console.log("OwnerPublicKey",t);const[r,a]=m.PublicKey.findProgramAddressSync([Buffer.from("pool")],z),o=await C("update_min_usdc_injection_amount"),s=new m.TransactionInstruction({programId:z,keys:[{pubkey:r,isSigner:!1,isWritable:!0},{pubkey:t,isSigner:!0,isWritable:!0}],data:Buffer.concat([o,new J(e).toArrayLike(Buffer,"le",8)])});return j(s,t)}async function ne(e){const{walletProvider:n}=(0,b.AX)("solana");if(void 0===n)return Promise.reject({code:-1,message:"walletProvider is undefined"});const t=n.publicKey;console.log("OwnerPublicKey",t);const[r,a]=m.PublicKey.findProgramAddressSync([Buffer.from("pool")],z),o=await C("update_fomo_program_id"),s=new m.TransactionInstruction({programId:z,keys:[{pubkey:r,isSigner:!1,isWritable:!0},{pubkey:t,isSigner:!0,isWritable:!0}],data:Buffer.concat([o,new m.PublicKey(e).toBuffer()])});return j(s,t)}async function te(e){const{walletProvider:n}=(0,b.AX)("solana");if(void 0===n)return Promise.reject({code:-1,message:"walletProvider is undefined"});const t=n.publicKey;console.log("OwnerPublicKey",t);const[r,a]=m.PublicKey.findProgramAddressSync([Buffer.from("pool")],z),o=await C("update_operation_usdc_account"),s=new m.TransactionInstruction({programId:z,keys:[{pubkey:r,isSigner:!1,isWritable:!0},{pubkey:t,isSigner:!0,isWritable:!0}],data:Buffer.concat([o,new m.PublicKey(e).toBuffer()])});return j(s,t)}async function re(e){const n=await O(),[t,r]=m.PublicKey.findProgramAddressSync([Buffer.from("pool")],z),a=await C("update_reward_claim_account"),o=new m.TransactionInstruction({programId:z,keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:n,isSigner:!0,isWritable:!0}],data:Buffer.concat([a,new m.PublicKey(e).toBuffer()])});return j(o,n)}async function ae(){const e=await O(),[n,t]=m.PublicKey.findProgramAddressSync([Buffer.from("pool")],z),r=await I(n),a=r.marb_vault,{connection:o}=(0,g.ZY)();if(!o)return Promise.reject({code:-1,message:"please connect wallet"});const s=(0,w.Xt)(H,e),i=await C("transfer_periodic_rewards"),c=new m.TransactionInstruction({programId:z,keys:[{pubkey:n,isSigner:!1,isWritable:!0},{pubkey:a,isSigner:!1,isWritable:!0},{pubkey:s,isSigner:!1,isWritable:!0},{pubkey:e,isSigner:!0,isWritable:!0},{pubkey:H,isSigner:!1,isWritable:!0},{pubkey:_.x5,isSigner:!1,isWritable:!0},{pubkey:m.SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!0}],data:Buffer.concat([i])});return j(c,e)}async function oe(){const e=await O(),[n,t]=m.PublicKey.findProgramAddressSync([Buffer.from("pool")],z),r=await I(n),a=r.usdc_vault,o=(0,w.Xt)(q,e),s=await C("emergency_usdc_withdraw"),i=new m.TransactionInstruction({programId:z,keys:[{pubkey:n,isSigner:!1,isWritable:!0},{pubkey:e,isSigner:!0,isWritable:!0},{pubkey:a,isSigner:!1,isWritable:!0},{pubkey:o,isSigner:!1,isWritable:!0},{pubkey:_.x5,isSigner:!1,isWritable:!0}],data:Buffer.concat([s])});return j(i,e)}async function se(e,n){return Y.getOrCreateAssociatedTokenAccount(new m.PublicKey(e),new m.PublicKey(n))}async function ie(e,n,t){const{connection:r}=(0,g.ZY)();if(!r)return Promise.reject({code:-1,message:"Connection is undefined"});const a=await O();if(!a)return Promise.reject({code:-1,message:"Owner public key is undefined"});const o=await se(e,a.toBase58());console.info("OwnerATAAccount",o);let s=new m.PublicKey(n);try{s=(await se(e,n)).address}catch(u){}console.log("RecipientATAAccount",s);const i=await(0,w.b6)(r,new m.PublicKey(e));if(!i)return Promise.reject({code:-1,message:"Mint not found"});if(o.address.equals(s))return Promise.reject({code:-1,message:"Cannot transfer to the same account"});if(t<=0)return Promise.reject({code:-1,message:"Amount must be greater than 0"});if(t>o.amount)return Promise.reject({code:-1,message:"Insufficient balance"});if(t>1e6)return Promise.reject({code:-1,message:"Amount exceeds the limit of 1,000,000"});if(t<1e-6)return Promise.reject({code:-1,message:"Amount must be at least 0.000001"});if(t*10**i.decimals>o.amount)return Promise.reject({code:-1,message:"Insufficient balance in owner ATA account"});const c=(0,V.C3)(o.address,s,a,BigInt(t*10**i.decimals),[],_.x5);return j(c,a)}const ce={connect(){return f.open()},async getAddress(){return new Promise((e=>{let n=f.getAccount("solana");if(n&&("connected"==n.status||"disconnected"==n.status))return void e(n.address);const t=()=>{n=f.getAccount("solana"),!n||"connected"!=n.status&&"disconnected"!=n.status?setTimeout(t,100):e(n.address)};t()}))},isConnected(){return new Promise((e=>{let n=f.getAccount("solana");if(n&&("connected"==n.status||"disconnected"==n.status))return void e("connected"===n.status);const t=()=>{n=f.getAccount("solana"),!n||"connected"!=n.status&&"disconnected"!=n.status?setTimeout(t,100):e("connected"===n.status)};t()}))},listenAccount(e,n){f.subscribeAccount((t=>{t.isConnected||e(),t.isConnected&&n()}))},...a,admin:{...o},fomo:{...r}};globalThis.Buffer=s.Buffer},87941:function(e){"use strict";e.exports=JSON.parse('{"address":"NpdKNnchyHTtdrCZCyp1aSrowEnBRERty26Px8cL8yP","metadata":{"name":"fomo","version":"0.1.0","spec":"0.1.0","description":"fomo"},"instructions":[{"name":"checkDrawCondition","docs":["检查是否达到开奖条件并触发开奖","此函数可以被定期调用，以确保即使无人参与也能在时间到达时开奖"],"discriminator":[113,247,11,87,253,186,45,65],"accounts":[{"name":"pool","writable":true,"pda":{"seeds":[{"kind":"const","value":[102,111,109,111,95,112,111,111,108]}]}}],"args":[]},{"name":"getPoolInfo","docs":["获取奖池信息，包括当前轮次、奖池金额、最高出价者、剩余时间等"],"discriminator":[9,48,220,101,22,240,78,200],"accounts":[{"name":"pool","pda":{"seeds":[{"kind":"const","value":[102,111,109,111,95,112,111,111,108]}]}}],"args":[]},{"name":"initialize","docs":["初始化FOMO抽奖池","@param prize_amount_threshold: 奖池金额达到此阈值时触发开奖","@param time_interval: 时间间隔(秒)，达到此时间间隔后触发开奖"],"discriminator":[175,175,109,31,13,152,155,237],"accounts":[{"name":"authority","writable":true,"signer":true},{"name":"pool","writable":true,"pda":{"seeds":[{"kind":"const","value":[102,111,109,111,95,112,111,111,108]}]}},{"name":"usdcVault","writable":true},{"name":"tokenProgram","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"systemProgram","address":"11111111111111111111111111111111"},{"name":"rent","address":"SysvarRent111111111111111111111111111111111"}],"args":[{"name":"prizeAmountThreshold","type":"u64"},{"name":"timeInterval","type":"i64"}]},{"name":"participate","docs":["参与FOMO抽奖（由其他合约调用）","@param user_wallet: 实际用户的钱包地址","@param amount: 参与金额(USDC)","@param user_timestamp: 用户购买时间戳（可选，如果为None则使用当前时间）"],"discriminator":[71,30,209,149,172,95,73,193],"accounts":[{"name":"caller","writable":true,"signer":true},{"name":"pool","writable":true,"pda":{"seeds":[{"kind":"const","value":[102,111,109,111,95,112,111,111,108]}]}},{"name":"participant","writable":true,"pda":{"seeds":[{"kind":"const","value":[112,97,114,116,105,99,105,112,97,110,116]},{"kind":"arg","path":"userWallet"},{"kind":"account","path":"pool.round","account":"fomoPool"}]}},{"name":"callerUsdcAccount","writable":true},{"name":"usdcVault","writable":true},{"name":"tokenProgram","address":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},{"name":"systemProgram","address":"11111111111111111111111111111111"}],"args":[{"name":"userWallet","type":"pubkey"},{"name":"amount","type":"u64"},{"name":"userTimestamp","type":{"option":"i64"}}]},{"name":"updateSettings","docs":["更新奖池设置","仅管理员可以调用","@param prize_amount_threshold: 新的奖池金额阈值","@param time_interval: 新的时间间隔(秒)"],"discriminator":[81,166,51,213,158,84,157,108],"accounts":[{"name":"authority","writable":true,"signer":true},{"name":"pool","writable":true,"pda":{"seeds":[{"kind":"const","value":[102,111,109,111,95,112,111,111,108]}]}}],"args":[{"name":"prizeAmountThreshold","type":{"option":"u64"}},{"name":"timeInterval","type":{"option":"i64"}}]}],"accounts":[{"name":"fomoPool","discriminator":[248,74,39,32,40,140,152,102]},{"name":"participant","discriminator":[32,142,108,79,247,179,54,6]}],"errors":[{"code":6000,"name":"invalidAmount","msg":""},{"code":6001,"name":"notProgramAuthority","msg":""},{"code":6002,"name":"notPoolAuthority","msg":""}],"types":[{"name":"fomoPool","docs":["FOMO奖池账户数据结构"],"type":{"kind":"struct","fields":[{"name":"authority","type":"pubkey"},{"name":"usdcVault","type":"pubkey"},{"name":"prizeAmountThreshold","type":"u64"},{"name":"timeInterval","type":"i64"},{"name":"totalAmount","type":"u64"},{"name":"round","type":"u64"},{"name":"lastStartTime","type":"i64"},{"name":"highestBidder","type":"pubkey"},{"name":"highestBidAmount","type":"u64"},{"name":"lastParticipants","type":{"vec":{"defined":{"name":"lastParticipant"}}}},{"name":"bump","type":"u8"}]}},{"name":"lastParticipant","docs":["最近参与者记录结构"],"type":{"kind":"struct","fields":[{"name":"user","type":"pubkey"},{"name":"timestamp","type":"i64"}]}},{"name":"participant","docs":["参与者账户数据结构"],"type":{"kind":"struct","fields":[{"name":"user","type":"pubkey"},{"name":"amount","type":"u64"},{"name":"timestamp","type":"i64"},{"name":"round","type":"u64"},{"name":"callerContract","type":"pubkey"}]}}]}')}}]);